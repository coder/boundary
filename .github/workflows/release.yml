name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            name: jail-linux-amd64
          - goos: linux
            goarch: arm64
            name: jail-linux-arm64
          # macOS builds
          - goos: darwin
            goarch: amd64
            name: jail-darwin-amd64
          - goos: darwin
            goarch: arm64
            name: jail-darwin-arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build binary
      run: |
        # Set target for cross-compilation
        export GOOS=${{ matrix.goos }}
        export GOARCH=${{ matrix.goarch }}
        export CGO_ENABLED=0
        
        # Build using Go directly for cross-compilation
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o ${{ matrix.name }} ./cmd/jail

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}
        retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./binaries

    - name: Prepare release assets
      run: |
        cd binaries
        # Create compressed archives for each binary
        for dir in */; do
          binary_name=$(basename "$dir")
          cd "$dir"
          # Unix: create tar.gz
          tar -czf "../${binary_name}.tar.gz" "$binary_name"
          cd ..
        done
        # List all release assets
        ls -la *.tar.gz

    - name: Generate release notes
      id: release_notes
      run: |
        echo "## 🚀 Release ${{ github.ref_name }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### 📦 Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Choose the appropriate binary for your platform:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Linux (x64)**: \`jail-linux-amd64.tar.gz\`" >> release_notes.md
        echo "- **Linux (ARM64)**: \`jail-linux-arm64.tar.gz\`" >> release_notes.md
        echo "- **macOS (Intel)**: \`jail-darwin-amd64.tar.gz\`" >> release_notes.md
        echo "- **macOS (Apple Silicon)**: \`jail-darwin-arm64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🛠️ Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the appropriate binary for your platform" >> release_notes.md
        echo "2. Extract the archive" >> release_notes.md
        echo "3. Make the binary executable (Unix): `chmod +x jail`" >> release_notes.md
        echo "4. Move to your PATH: `sudo mv jail /usr/local/bin/` (Unix)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### ✅ Verification" >> release_notes.md
        echo "" >> release_notes.md
        echo "Verify installation: `jail --help`" >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          binaries/*.tar.gz
        body_path: release_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}